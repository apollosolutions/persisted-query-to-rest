name: Build and Release

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Version string for Git and Docker tag. Just number 1.2.3, no starting v"
                type: string
                required: true
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

defaults:
    run:
        # necessary for windows
        shell: bash

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4.1.7
            - uses: actions-rust-lang/setup-rust-toolchain@v1
            - uses: arduino/setup-protoc@v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
            - name: Running examples
              run: |
                  cargo test

    prepare-release:
        needs: test
        runs-on: ubuntu-latest
        outputs:
            sha: ${{ steps.commit.outputs.sha }}
        steps:
            - uses: actions/checkout@v4.1.7
              name: Fetch entire history (for conventional commits)
              with:
                  fetch-depth: 0
            - name: Configure Git
              run: |
                  git config --global user.name GitHub Actions
                  git config user.email github-actions@github.com
            - name: Install Knope
              uses: knope-dev/action@v2.1.0
              with:
                  version: 0.18.0
            - run: knope prepare-release --verbose --override-version ${{ inputs.version }}
              name: Update versioned files and changelog
            - name: Store commit
              id: commit
              run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    build-artifacts:
        needs: prepare-release
        strategy:
            matrix:
                include:
                    - target: x86_64-unknown-linux-gnu
                      os: ubuntu-latest
                    - target: aarch64-apple-darwin
                      os: macos-latest
                    - target: x86_64-pc-windows-msvc
                      os: windows-latest
        runs-on: ${{ matrix.os }}
        env:
            archive_name: persisted-query-to-rest
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ needs.prepare-release.outputs.sha }}

            - uses: actions-rust-lang/setup-rust-toolchain@v1

            - uses: arduino/setup-protoc@v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build
              run: cargo build --release --target ${{ matrix.target }}

            - name: Create Archive Folder
              run: mkdir ${{ env.archive_name }}

            - name: Copy Unix Artifact
              if: ${{ matrix.os != 'windows-latest' }}
              run: cp target/${{ matrix.target }}/release/${{ env.archive_name }} ${{ env.archive_name }}

            - name: Copy Windows Artifact
              if: ${{ matrix.os == 'windows-latest' }}
              run: cp target/${{ matrix.target }}/release/${{ env.archive_name }}.exe ${{ env.archive_name }}

            - name: Create Tar Archive
              run: tar -czf ${{ env.archive_name }}-${{ matrix.target }}.tgz ${{ env.archive_name }}

            - name: Upload Artifact
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: ${{ matrix.target }}
                  path: ${{ env.archive_name }}-${{ matrix.target }}.tgz
                  if-no-files-found: error
    release:
        needs: [build-artifacts, prepare-release]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4.1.7
              with:
                  ref: ${{ needs.prepare-release.outputs.sha }}
            - uses: actions/download-artifact@v4.1.8
              with:
                  path: artifacts
                  merge-multiple: true
            - run: |
                  cd artifacts
                  ls
                  cd ..
            - name: Install the latest Knope
              uses: knope-dev/action@v2.1.0
              with:
                  version: 0.11.0
            - run: knope release --verbose --override-version ${{ inputs.version }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    build-and-push-image:
        runs-on: ubuntu-latest
        # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
        permissions:
            id-token: write
            contents: read
            packages: write
            attestations: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
            - name: Log in to the Container registry
              uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=v${{ inputs.version }},event=workflow_dispatch
            # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
            # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
            # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true
